<?xml version="1.0" ?>
<node name="/Channel_Interface_Delivery_Reporting"
  xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0">
  <tp:copyright>Copyright (C) 2008 Collabora Ltd.</tp:copyright>
  <tp:copyright>Copyright (C) 2008 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface
    name="org.freedesktop.Telepathy.Channel.Interface.DeliveryReporting.DRAFT"
    tp:causes-havoc="experimental">
    <tp:requires interface="org.freedesktop.Telepathy.Channel.Type.Text"/>
    <tp:requires interface="org.freedesktop.Telepathy.Channel.Interface.Messages"/>
    <tp:added version="0.17.5">(draft version, not API-stable)</tp:added>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>This interface extends the Text and Messages interfaces with improved
        sent-message status reporting.</p>

      <p>This interface replaces Text.SendError, adding support for protocols
        where the message content is not echoed back to the sender on
        failure. It also adds support for receiving positive
        acknowledgements, and uses the Messages queue for state-recovery
        (ensuring that incoming delivery reports are not lost if there is not
        currently a process handling them).</p>

      <p>If this interface and the Messages interface are both present,
        clients that support it SHOULD listen for the MessageReceived signal
        to get delivery reports, and ignore the SendError signal on the Text
        interface.</p>

      <p>Delivery reports appear as messages of type
        Channel_Text_Message_Type_Delivery_Report in the Text and Messages
        interfaces. The message in the Text interface SHOULD have the
        Non_Text_Content flag.</p>

      <p>Whenever a message of type Channel_Text_Message_Type_Delivery_Report
        is signalled for a delivery error report, Channel.Type.Text.SendError
        SHOULD also be emitted; whenever Channel.Type.Text.SendError is
        emitted by a channel which supports this interface, a message of type
        Channel_Text_Message_Type_Delivery_Report MUST also be emitted.</p>

      <p>The corresponding message in the Messages interface MUST contain
        "headers" for the delivery report, as specified below, in its
        first Message_Part.</p>

      <dl>
        <dt>interface (s - DBus_Interface, as defined in the Messages
          interface)</dt>
        <dd>MUST be the name of this interface.</dd>

        <dt>message-sender (u - Contact_Handle, as defined in the Messages
          interface)</dt>
        <dd>MUST be the intended recipient of the original message, if
          available (zero or omitted otherwise), even if the delivery report
          actually came from an intermediate server.</dd>

        <dt>message-type (u - Channel_Text_Message_Type, as defined in the
          Messages interface)</dt>
        <dd>MUST be Channel_Text_Message_Type_Delivery_Report.</dd>

        <dt>delivery-status (u - Delivery_Status)</dt>
        <dd>The status of the message. All delivery reports MUST contain
          this key in the first Message_Part.</dd>

        <dt>delivery-token (s - Sent_Message_Token)</dt>

        <dd>
          <p>An identifier for the message to which this delivery report
            refers. MUST NOT be an empty string. Omitted if not
            available.</p>

          <p>Clients may match this against the token produced by the
            SendMessage method and MessageSent signal on the Messages
            interface. A status report with no token could match any sent
            message, and a sent message with an empty token could match
            any status report. If multiple sent messages match, clients
            SHOULD use some reasonable heuristic.</p>

          <tp:rationale>
            In an ideal world, we could unambiguously match reports
            against messages; however, deployed protocols are not ideal,
            and not all reports and messages can be matched.
          </tp:rationale>
        </dd>

        <dt>delivery-error (u - Channel_Text_Send_Error)</dt>
        <dd>
          The reason for the failure. MUST be omitted if this was a
          successful delivery; SHOULD be omitted if it would be
          Channel_Text_Send_Error_Unknown.
        </dd>

        <dt>delivery-echo (aa{sv} - Message_Part[])</dt>
        <dd>
          <p>The message content, as defined by the Messages interface.
            Omitted if no content is available. Content MAY have been
            truncated, message parts MAY have been removed, and message
            parts MAY have had their content removed (i.e. the message part
            metadata is present, but the 'content' key is not).</p>

          <tp:rationale>
            Some protocols, like XMPP, echo the failing message back to
            the sender. This is sometimes the only way to match it
            against the sent message, so we include it here.
          </tp:rationale>

          <p>Unlike in the Messages interface, content not visible
            in the value for this key cannot be retrieved by another
            means, so the connection manager SHOULD be more
            aggressive about including (possibly truncated) message
            content in the 'content' key.</p>

          <tp:rationale>
            The Messages interface needs to allow all content to be
            retrieved, but in this interface, the content we provide is
            merely a hint; so some is better than none, and it doesn't
            seem worth providing an API as complex as Messages'
            GetPendingMessageContent for the echoed message.
          </tp:rationale>
        </dd>

      </dl>

      <p>The second and subsequent Message_Part dictionaries, if present,
        are a human-readable report from the IM service.</p>

      <p>It is an error for this interface to appear on channels of type
        other than Text, or on Text channels without the Messages interface.
        Clients MUST recover from this error by ignoring the presence
        of the DeliveryReporting interface.</p>

      <p>Some example delivery reports in a Python-like syntax (in which
        arrays are indicated by [a, b] and dictionaries by {k1: v1, k2: v2})
        follow.</p>

      <dl>
        <dt>A minimal delivery report indicating permanent failure of the
          sent message whose token was
          <code>b9a991bd-8845-4d7f-a704-215186f43bb4</code> for an unknown
          reason</dt>
        <dd><pre>
[{
# header
'interface': 'org.freedesktop.Telepathy.Channel.Interface.DeliveryReporting',
'message-sender': 123,
'message-type': Channel_Text_Message_Type_Delivery_Report,
'delivery-status': Delivery_Status_Permanently_Failed,
'delivery-token': 'b9a991bd-8845-4d7f-a704-215186f43bb4',
}
# no body
]
</pre></dd>

        <dt>A delivery report where the failed message is echoed back to the
          sender rather than being referenced by ID, and the failure reason
          is that this protocol cannot send messages to offline contacts
          such as the contact with handle 123</dt>
        <dd><pre>
[{ # header
'interface': 'org.freedesktop.Telepathy.Channel.Interface.DeliveryReporting',
'message-sender': 123,
'message-type': Channel_Text_Message_Type_Delivery_Report,
'delivery-status': Delivery_Status_Temporarily_Failed,
'delivery-error': Channel_Text_Send_Error_Offline,
'delivery-echo':
    [{ # header of original message
    'message-sender': 1,
    'message-sent': 1210067943,
    },
    { # body of original message
    'type': 'text/plain',
    'content': 'Hello, world!',
    }]
  ],

# no body
]
</pre></dd>

        <dt>A maximally complex delivery report: the server reports a bilingual
          human-readable failure message because the user sent a message
          "Hello, world!" with token
          <code>b9a991bd-8845-4d7f-a704-215186f43bb4</code> to a contact
          with handle 123, but that handle represents a contact who does not
          actually exist</dt>
        <dd><pre>
[{ # header
'interface': 'org.freedesktop.Telepathy.Channel.Interface.DeliveryReporting',
'message-sender': 123,
'message-type': Channel_Text_Message_Type_Delivery_Report,
'delivery-status': Delivery_Status_Permanently_Failed,
'delivery-error': Channel_Text_Send_Error_Invalid_Contact,
'delivery-token': 'b9a991bd-8845-4d7f-a704-215186f43bb4',
'delivery-echo':
    [{ # header of original message
    'message-sender': 1,
    'message-sent': 1210067943,
    },
    { # body of original message
    'type': 'text/plain',
    'content': 'Hello, world!',
    }]
  ],
},
{ # message from server (alternative in English)
'alternative': '404',
'type': 'text/plain',
'lang': 'en',
'content': 'I have no contact with that name',
},
{ # message from server (alternative in German)
'alternative': '404'.
'type': 'text/plain',
'lang': 'de',
'content', 'Ich habe keinen Kontakt mit diesem Namen',
}
]
</pre></dd>

        <dt>A minimal delivery report indicating successful delivery
          of the sent message whose token was
          <code>b9a991bd-8845-4d7f-a704-215186f43bb4</code></dt>
        <dd><pre>
[{
# header
'interface': 'org.freedesktop.Telepathy.Channel.Interface.DeliveryReporting',
'message-sender': 123,
'message-type': Channel_Text_Message_Type_Delivery_Report,
'delivery-status': Delivery_Status_Delivered,
'delivery-token': 'b9a991bd-8845-4d7f-a704-215186f43bb4',
}
# no body
]
</pre></dd>

      </dl>
    </tp:docstring>

    <tp:enum name="Delivery_Status" value-prefix="Delivery_Status" type="u">
      <tp:docstring>
        <p>The status of a message as indicated by a delivery report.</p>

        <p>If this enum is extended in future specifications, this should
          only be to add new, non-overlapping conditions (i.e. all failures
          should still be signalled as either Temporarily_Failed
          or Permanently_Failed). If additional detail is required (e.g.
          distinguishing between the various types of permanent failure) this
          will be done using additional keys in the Message_Part.</p>
      </tp:docstring>

      <tp:enumvalue suffix="Unknown" value="0">
        <tp:docstring>
          The message's disposition is unknown.
          Clients SHOULD consider all messages to have status
          Delivery_Status_Unknown unless otherwise specified; connection
          managers SHOULD NOT signal this delivery status explicitly.
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Delivered" value="1">
        <tp:docstring>
          The message has been delivered to the intended recipient.
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Temporarily_Failed" value="2">
        <tp:docstring>
          Delivery of the message has failed. Clients SHOULD notify the user,
          but MAY automatically try sending another copy of the message.

          <tp:rationale>
            Similar to errors with type="wait" in XMPP; analogous to
            4xx errors in SMTP.
          </tp:rationale>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Permanently_Failed" value="3">
        <tp:docstring>
          Delivery of the message has failed. Clients SHOULD NOT try again
          unless by specific user action. If the user does not modify the
          message or alter configuration before re-sending, this error is
          likely to happen again.

          <tp:rationale>
            Similar to errors with type="cancel", type="modify"
            or type="auth" in XMPP; analogous to 5xx errors in SMTP.
          </tp:rationale>
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <tp:flags name="Delivery_Reporting_Support_Flags"
      value-prefix="Delivery_Reporting_Support_Flag" type="u">
      <tp:docstring>
        Flags indicating the level of support for delivery reporting on this
        channel. Any future flags added to this set will conform to the
        convention that the presence of an extra flag implies that
        more operations will succeed.
      </tp:docstring>

      <tp:flag suffix="Receive_Failures" value="1">
        <tp:docstring>
          Clients MAY expect to receive negative delivery reports if
          Message_Sending_Flag_Report_Delivery is specified when sending.

          <tp:rationale>
            If senders want delivery reports, they should ask for them.
            If they don't want delivery reports, they can just ignore them,
            so there's no need to have capability discovery for what will
            happen if a delivery report isn't requested.
          </tp:rationale>
        </tp:docstring>
      </tp:flag>

      <tp:flag suffix="Receive_Successes" value="2">
        <tp:docstring>
          Clients MAY expect to receive positive delivery reports if
          Message_Sending_Flag_Report_Delivery is specified when sending.

          <tp:rationale>
            Same rationale as Receive_Failures.
          </tp:rationale>
        </tp:docstring>
      </tp:flag>

      <tp:flag suffix="Send_Failures" value="4">
        <tp:docstring>
          Clients MAY expect that sending a negative delivery report will
          succeed, and will actually get a message to the sender.
        </tp:docstring>
      </tp:flag>

      <tp:flag suffix="Send_Successes" value="8">
        <tp:docstring>
          Clients MAY expect that sending a positive delivery report will
          succeed, and will actually get a message to the sender.
        </tp:docstring>
      </tp:flag>

    </tp:flags>

    <property name="DeliveryReportingSupport" access="read"
      tp:type="Delivery_Reporting_Support_Flags" type="u">
      <tp:docstring>
        A bitfield indicating features supported by this channel.
      </tp:docstring>
    </property>

    <method name="SendDeliveryReport">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Request that a delivery report is sent for the specified pending
          incoming message. Delivery reports cannot currently be sent for
          messages that have already been acknowledged.</p>

        <tp:rationale>
          <p>The only use-case I can see for delivery reports on non-pending
            messages is a "read receipt" like in email's RFC 3798. Delivery
            reports on non-pending messages will also need a more complex
            API.</p>

          <p>If they turn out to be needed, we can add a method like
            SendDeliveryReportByContent(aa{sv}: message) and add a flag to
            Delivery_Reporting_Support_Flags indicating that this method is
            implemented.</p>
        </tp:rationale>

        <p>Clients SHOULD NOT attempt to send delivery reports that are
          not indicated to be supported using the DeliveryReportingSupport
          property.</p>

        <p>Clients MUST NOT attempt to send delivery reports using the
          SendMessage method in the Messages API, and connection managers
          MUST NOT allow this to be done.</p>
      </tp:docstring>

      <arg name="Messages" type="au" tp:type="Message_ID[]" direction="in">
        <tp:docstring>
          The IDs of one or more unacknowledged messages.
        </tp:docstring>
      </arg>

      <arg name="Status" direction="in" type="u" tp:type="Delivery_Status">
        <tp:docstring>
          The status to be reported.
        </tp:docstring>
      </arg>

      <arg name="Reason" direction="in" type="u"
        tp:type="Channel_Text_Send_Error">
        <tp:docstring>
          If the status to be reported is a failure, the reason for that
          failure. If the status to be reported is not an error, this MUST be
          Channel_Text_Send_Error_Unknown.
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError">
        </tp:error>

        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            One of the specified message IDs was invalid. No delivery reports
            were sent.
          </tp:docstring>
        </tp:error>

        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            The requested message status could not be reported to the sender
            (for instance, this will be raised if a positive delivery report
            is requested on a protocol that only supports negative delivery
            reports). Clients MUST treat this error as non-fatal.
          </tp:docstring>
        </tp:error>

        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            This channel cannot report message status back to the sender
            at all. Do not call this method on this channel again.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

  </interface>
</node>
<!-- vim:set sw=2 sts=2 et ft=xml: -->
